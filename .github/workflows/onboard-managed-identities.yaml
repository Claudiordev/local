name: Create or update JWT claims

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      vault_environment:
        description: "Vault environment where system will be configured"
        required: true
        type: string
      system_name:
        description: "Name of the system"
        required: true
        type: string
      managed_identities:
        description: "Identity to add JWT access to"
        required: true
        type: string
      secret_paths:
        description: "Engine path to add JWT access to"
        required: false
        type: string
      updatedBy:
        description: "User who triggered the workflow"
        required: true
        type: string
      autoApproval:
        description: "Auto approve the PR"
        required: false
        type: string
        default: "true"

jobs:
  create_claims:
    name: PR to give access to JWT
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check if Vault environment is correct
        run: |
          vaultEnvironment="${{ inputs.vault_environment }}"
          if [[ "$vaultEnvironment" != "weu-qa" && "$vaultEnvironment" != "weu-prod" ]]; then
              echo "Vault environment $vaultEnvironment is not supported."
          fi

      # Checkout the repository first
      - name: Checkout repo
        uses: actions/checkout@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout branch
        id: checkout-branch
        run: |
          pwd
          # Step 1: Ensure main is up to date
          git fetch --unshallow
          echo "git checkout main"
          git checkout main
          git pull origin main

          # Step 2: Create the feature branch from main
          branch_name=$(echo "${{ inputs.system_name }}" | sed 's/^system:default\///')
          echo "Creating the feature branch."
          git checkout -b "${branch_name}-jwt-claim"

      # Install python packages
      - name: Install packages
        run: |
          pip3 install ruamel.yaml
          pip3 install ruamel.yaml.string
          pip3 install adal
          pip3 install requests
          pip3 install pyGitHub
          pip3 install msal

      # Runs a python script to create or update claim
      - name: Create or update claims
        run: |
          echo "Running the KV2 secret engine claim script..."
          system_name=$(echo "${{ inputs.system_name }}" | sed 's/^system:default\///')
          python3 scripts/github-actions/kv2-group-access-mi-claim.py 'create_claims' \
                                                  --vaultEnvironment '${{ inputs.vault_environment }}' \
                                                  --systemName "${system_name}" \
                                                  --managedIdentities "${{ inputs.managed_identities }}" \
                                                  --secretPaths "${{ inputs.secret_paths }}"

#          elif [ "${{ inputs.vaultEnvironment }}" == "weu-prod" ]; then
#            python3 scripts/github-actions/kv2-secret-engine-claim.py 'create_secret_engine_claim' \
#                                                  --vaultEnvironment '${{ inputs.vaultEnvironment }}' \
#                                                  --systemName '${{ inputs.systemName }}' \
#                                                  --ownerGroup "$ENTRA_ID_GROUP" \
#                                                  --updatedBy '${{ inputs.updatedBy }}' \
#                                                  --clientID 'a2b175e4-01bd-4ee8-84d1-3c3936303bbb' \
#                                                  --clientSecret '${{ secrets.CENTRAL_VAULT_CLIENT_SECRET_AZ }}'

#          else
#            echo "Invalid vault environment"
#            exit 1
#          fi

#      - name: Create or update group access claims
#        run: |
#          # Define group access configurations dynamically
#          groupAccessConfigs='[{"entraIDGroup":"'$ENTRA_ID_GROUP'","readSecretPaths":[],"writeSecretPaths":[{"writeSecretPath":"*"}]}]'

#          echo "Group Access Configs: $groupAccessConfigs"

#          if [ "${{ inputs.vaultEnvironment }}" == "weu-qa" ]; then
#            python3 scripts/github-actions/kv2-group-access-claim.py 'create_group_access_claim' \
#              --vaultEnvironment '${{ inputs.vaultEnvironment }}' \
#              --secretEngine '${{ inputs.systemName }}-kv' \
#              --updatedBy '${{ inputs.updatedBy }}' \
#              --groupAccessConfigs "$groupAccessConfigs" \
#              --clientID 'a27a21ba-0882-4217-a06a-78858900893f' \
#              --clientSecret '${{ secrets.CENTRAL_VAULT_QA_CLIENT_SECRET_AZ }}'
#          elif [ "${{ inputs.vaultEnvironment }}" == "weu-prod" ]; then
#            python3 scripts/github-actions/kv2-group-access-claim.py 'create_group_access_claim' \
#              --vaultEnvironment '${{ inputs.vaultEnvironment }}' \
#              --secretEngine '${{ inputs.systemName }}-kv' \
#              --updatedBy '${{ inputs.updatedBy }}' \
#              --groupAccessConfigs "$groupAccessConfigs" \
#              --clientID 'a2b175e4-01bd-4ee8-84d1-3c3936303bbb' \
#              --clientSecret '${{ secrets.CENTRAL_VAULT_CLIENT_SECRET_AZ }}'
#          else
#            echo "Invalid vault environment"
#            exit 1
#          fi

      - name: Commit changes
        id: commit-changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for changes to commit..."
          if [ -n "$(git status --porcelain)" ]; then
            git config user.email "cfreita1@volvocars.com"
            git config user.name "Claudiordev"
            echo "git branch -l"
            git branch -l
            echo "git add";
            git add --all
            echo "git commit";
            git commit -m "Created/Updated Claims for ${{ inputs.system_name }} JWT"
            echo "git push -u origin ${{ inputs.system_name }}-jwt-claim";
            git push -u origin ${{ inputs.system_name }}-jwt-claim
          else
            echo "No changes to commit.";
          fi

      - name: Create a PR
        id: create-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git branch --show-current
          pr_output=$(gh pr create --title "feat: Create/Update ${{ inputs.vault_engine }} JWT claims" --body "Changes for adding/updating ${{ inputs.vault_engine }} JWT claims along with the group claims if needed.")
          # Extract the pull request number from the output and print it
          pr_number=$(echo "$pr_output" | grep -oP '(?<=/pull/)\d+')
          echo "Pull request created with number: $pr_number"
          echo "pr_number=${pr_number}" >> $GITHUB_OUTPUT
          
      - id: automerge
        name: Automerge PR and delete branch
        if: ${{ inputs.autoApproval == 'true' }}
        continue-on-error: true
        uses: "pascalgn/automerge-action@v0.15.3"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          PULL_REQUEST: "${{ steps.create-pr.outputs.pr_number }}"
          MERGE_LABELS: ""
          MERGE_COMMIT_MESSAGE: "pull-request-title"
          MERGE_FORKS: "false"
          MERGE_RETRIES: "30"
          MERGE_RETRY_SLEEP: "10000"
          MERGE_REQUIRED_APPROVALS: "0"
          MERGE_DELETE_BRANCH: "true"
          MERGE_ERROR_FAIL: "true"

      - name: Send email to the requester on success
        uses: xander-rudolph/send-grid-action@main
        if: ${{ env.EXIT_CODE_CLAIM_CREATION_SCRIPT == 'success' }}
        env:
          sendGridApiKey: ${{ secrets.SENDGRID_KEY }}
        with:
          toEmail: ${{ inputs.updatedBy }}
          fromEmail: BPPCSMOP@volvocars.com
          subject: "JWT enabled in ${{ inputs.system_name }}"
          body: |
            <html>
              <body>
                <p>Hello,</p>
                <p>Your request to enable JWT has been successfully processed. This will be reflected in Vault after 10 mins.</p>
                <h3>Details:</h3>
                <ul>
                  <li><b>Vault Environment:</b> ${{ inputs.vault_environment }}</li>
                  <li><b>Managed identities:</b> ${{ inputs.managed_identities }}</li>
                  <li><b>Secret Path and its access details:</b> ${{ inputs.secret_paths }}</li>
                </ul>
                <h3>Access Information:</h3>
                <ul>
                  <li>Your specified managed identities have now read access to the above secret path(s).</li>
                  <li>Access IT with JWT at:
                    <ul>
                      <li>QA Environment: <a href="https://vault-qa.csm.volvocars.biz">https://vault-qa.csm.volvocars.biz</a></li>
                      <li>Production Environment: <a href="https://vault.csm.volvocars.biz">https://vault.csm.volvocars.biz</a></li>
                    </ul>
                  </li>
                </ul>
                <h3>Track Your Request:</h3>
                <p>
                  Monitor the progress here: <a href="https://github.com/volvo-cars/central-vault-configurations/pull/${{ steps.create-pr.outputs.pr_number }}">PR</a>
                </p>
                <h3>Need Help?</h3>
                <p>
                  Join our support channel: <a href="https://volvocars.enterprise.slack.com/archives/C087XFLEG3H">
                    #central-vault-support in slack
                  </a>
                </p>
                <p>Happy coding,<br>DevEx Security - Central Secrets Management</p>
              </body>
            </html>